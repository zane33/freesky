# Multi-stage build for optimized container
# Stage 1: Base image with common dependencies
FROM python:3.13-slim AS base

# Install system dependencies in a single layer
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    dos2unix \
    unzip \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Node.js 20.x (LTS) in a single layer
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && npm config set registry https://registry.npmjs.org/

# Stage 2: Python dependencies
FROM base AS python-deps

WORKDIR /app

# Copy only requirements first for better caching
COPY requirements.txt .

# Create virtual environment and install Python dependencies
RUN python -m venv /app/.venv \
    && . /app/.venv/bin/activate \
    && pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt

# Stage 3: Frontend build
FROM base AS frontend-builder

WORKDIR /app

# Copy package files for frontend
COPY requirements.txt .
COPY rxconfig.py .

# Create virtual environment and install Reflex
RUN python -m venv /app/.venv \
    && . /app/.venv/bin/activate \
    && pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir reflex==0.8.0

# Copy application code
COPY . .

# Set build arguments and environment variables
ARG PORT=3000
ARG BACKEND_PORT=8005
ARG API_URL
ARG DADDYLIVE_URI="https://thedaddy.click"
ARG PROXY_CONTENT=TRUE
ARG SOCKS5=""

ENV PORT=${PORT} \
    BACKEND_PORT=${BACKEND_PORT} \
    BACKEND_URI=http://0.0.0.0:${BACKEND_PORT} \
    API_URL=${API_URL:-http://0.0.0.0:${PORT}} \
    DADDYLIVE_URI=${DADDYLIVE_URI} \
    PROXY_CONTENT=${PROXY_CONTENT} \
    SOCKS5=${SOCKS5} \
    REFLEX_ENV=prod

# Build frontend with optimized settings
RUN . /app/.venv/bin/activate \
    && reflex init \
    && cd .web \
    && npm config set strict-ssl false \
    && npm install --legacy-peer-deps --production \
    && cd .. \
    && reflex export --frontend-only --no-zip \
    && mkdir -p /srv \
    && mv .web/build/client/* /srv/ \
    && rm -rf .web

# Stage 4: Final runtime image
FROM python:3.13-slim AS runtime

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    caddy \
    redis-server \
    curl \
    gnupg \
    dos2unix \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && npm config set registry https://registry.npmjs.org/

# Set environment variables
ARG PORT=3000
ARG BACKEND_PORT=8005
ARG API_URL
ARG DADDYLIVE_URI="https://thedaddy.click"
ARG PROXY_CONTENT=TRUE
ARG SOCKS5=""

ENV PATH="/app/.venv/bin:$PATH" \
    PORT=${PORT} \
    BACKEND_PORT=${BACKEND_PORT} \
    BACKEND_URI=http://0.0.0.0:${BACKEND_PORT} \
    API_URL=${API_URL:-http://0.0.0.0:${PORT}} \
    DADDYLIVE_URI=${DADDYLIVE_URI} \
    REDIS_URL=redis://0.0.0.0 \
    PYTHONUNBUFFERED=1 \
    PROXY_CONTENT=${PROXY_CONTENT} \
    SOCKS5=${SOCKS5} \
    WORKERS=6 \
    REFLEX_ENV=prod \
    REFLEX_SKIP_COMPILE=1

WORKDIR /app

# Copy Python virtual environment from python-deps stage
COPY --from=python-deps /app/.venv /app/.venv

# Copy application code
COPY . .

# Copy built frontend from frontend-builder stage
COPY --from=frontend-builder /srv /srv

# Convert line endings and set permissions
RUN dos2unix /app/start.sh \
    && chmod +x /app/start.sh \
    && dos2unix /app/Caddyfile

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser \
    && chown -R appuser:appuser /app /srv \
    && chown -R appuser:appuser /var/lib/redis \
    && chown -R appuser:appuser /var/log/redis

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT:-3000}/api/health || exit 1

# Expose ports
EXPOSE ${PORT} ${BACKEND_PORT}

# Use SIGKILL for proper shutdown
STOPSIGNAL SIGKILL

# Start the application
CMD ["/app/start.sh"] 